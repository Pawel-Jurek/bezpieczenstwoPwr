import{_ as a,c as o,o as t,ae as r}from"./chunks/framework.3AeSRRNn.js";const u=JSON.parse('{"title":"📊 Data & Models","description":"","frontmatter":{},"headers":[],"relativePath":"data-and-models.md","filePath":"data-and-models.md"}'),i={name:"data-and-models.md"};function n(s,e,l,d,c,p){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="data-and-models" tabindex="-1">📊 Data &amp; Models <a class="header-anchor" href="#data-and-models" aria-label="Permalink to &quot;📊 Data &amp; Models {#data-and-models}&quot;">​</a></h1><p>This section covers how behavioral data is used to train machine learning models in <strong>bezpieczenstwoPwr</strong>, as well as how those models are integrated and run in the browser.</p><h2 id="data-source" tabindex="-1">📁 Data Source <a class="header-anchor" href="#data-source" aria-label="Permalink to &quot;📁 Data Source {#data-source}&quot;">​</a></h2><p>The machine learning models are trained using anonymized user behavior data, primarily from:</p><ul><li><a href="https://www.kaggle.com/" target="_blank" rel="noreferrer">Kaggle datasets</a> related to <strong>mouse movement</strong>, <strong>bot detection</strong>, or <strong>human-computer interaction</strong></li><li>Custom-collected data from real users and simulation tools (e.g., puppeteer)</li></ul><p>Typical features include:</p><ul><li>Mouse speed and acceleration</li><li>Click patterns and hesitation times</li><li>Pointer trajectory shapes</li><li>Keystroke intervals and input dynamics</li></ul><blockquote><p>🧠 All data is anonymized before any storage or model training. No personally identifiable information is collected.</p></blockquote><h2 id="data-processing" tabindex="-1">🛠 Data Preprocessing <a class="header-anchor" href="#data-processing" aria-label="Permalink to &quot;🛠 Data Preprocessing {#data-processing}&quot;">​</a></h2><p>Before feeding data into the model, we perform several preprocessing steps:</p><ul><li><strong>Normalization</strong> of coordinates and timing</li><li><strong>Sequence padding</strong> or trimming to ensure consistent input shape</li><li><strong>Feature extraction</strong> such as velocity, direction changes, or dwell time</li><li><strong>Noise filtering</strong> to remove accidental or edge-case inputs</li></ul><p>You can find preprocessing code inside the training pipeline scripts (not yet published, ask us if you want early access).</p><h2 id="model-architecture" tabindex="-1">🧠 Model Architecture <a class="header-anchor" href="#model-architecture" aria-label="Permalink to &quot;🧠 Model Architecture {#model-architecture}&quot;">​</a></h2><p>Models are designed for lightweight, in-browser inference using <a href="https://www.tensorflow.org/js/" target="_blank" rel="noreferrer">TensorFlow.js</a>.</p><p>We experimented with:</p><ul><li>LSTM / GRU networks for time-sequence analysis</li><li>1D CNNs for spatial-temporal patterns</li><li>Ensemble methods trained offline and distilled into TensorFlow.js format</li></ul><p>The final model is selected based on size, accuracy, and inference speed in the browser.</p><blockquote><p>⚠️ Models are kept under <code>public/models/</code> for now. Expect a proper versioning system and CDN-hosted models in future updates.</p></blockquote><h2 id="loading-models" tabindex="-1">📦 Loading Models <a class="header-anchor" href="#loading-models" aria-label="Permalink to &quot;📦 Loading Models {#loading-models}&quot;">​</a></h2><p>The <code>bbotd</code> package automatically loads a model from a given URL.</p>',20)]))}const h=a(i,[["render",n]]);export{u as __pageData,h as default};
